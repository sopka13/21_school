Assignment name  : mini_serv
Expected files   : mini_serv.c
Allowed functions: write, close, select, socket, accept, listen, send, recv,
bind, strstr, malloc, realloc, free, calloc, bzero, atoi, sprintf, strlen,
exit, strcpy, strcat, memset
--------------------------------------------------------------------------------

Write a program that will listen for client to connect on a certain port on         -
127.0.0.1 and will let clients to speak with each other
// Напишите программу, которая будет прослушивать подключение клиента к
// определенному порту на 127.0.0.1 и позволит клиентам общаться друг с другом.

This program will take as first argument the port to bind to                        -
// Эта программа примет в качестве первого аргумента порт для привязки.
If no argument is given, it should write in stderr "Wrong number of arguments"      +
followed by a \n and exit with status 1
If a System Calls returns an error before the program start accepting               +
connection, it should write in stderr "Fatal error" followed by a \n and exit
with status 1
// Если системные вызовы возвращают ошибку до того, как программа начнет принимать
// соединение, она должна написать в stderr «Неустранимая ошибка», за которой
// следует \n, и выйти со статусом 1.
If you cant allocate memory it should write in stderr "Fatal error" followed        -
by a \n and exit with status 1

Your program must be non-blocking but client can be lazy and if they don't read     -
your message you must NOT disconnect them...
// Ваша программа должна быть неблокирующей, но клиент может быть ленивым,
// и если он не прочитает ваше сообщение, вы НЕ должны его отключать...

Your program must not contains #define preproc                                      +
Your program must only listen to 127.0.0.1                                          +
The fd that you will receive will already be set to make 'recv' or 'send' to block  -
if select hasn't be called before calling them, but will not block otherwise.
// FD, который вы получите, уже будет настроен на блокировку 'recv' или 'send',
// если select не был вызван перед их вызовом, но не будет блокироваться в противном
// случае. 

When a client connect to the server:
- the client will be given an id. the first client will receive the id 0 and each   -
new client will received the last client id + 1
// клиенту будет присвоен идентификатор. первый клиент получит идентификатор 0,
// а каждый новый клиент получит последний идентификатор клиента + 1 
- %d will be replace by this number                                                 -
//  %d будет заменен этим номером 
- a message is sent to all the client that was connected to the server: "server:    -
client %d just arrived\n"
// всем клиентам, которые были подключены к серверу, отправляется сообщение:
// "сервер: клиент %d только что прибыл\n" 

clients must be able to send messages to your program.                              -
// клиенты должны иметь возможность отправлять сообщения вашей программе.
- message will only be printable characters, no need to check                       -
// сообщение будет состоять только из печатных символов, проверять не нужно
- a single message can contains multiple \n                                         -
// одно сообщение может содержать несколько \n
- when the server receive a message, it must resend it to all the other client with -
"client %d: " before every line!
// когда сервер получает сообщение, он должен повторно отправить его всем другим
// клиентам с «client %d:» перед каждой строкой! 

When a client disconnect from the server:
- a message is sent to all the client that was connected to the server: "server:    -
client %d just left\n"
// всем клиентам, которые были подключены к серверу, отправляется сообщение:
// "сервер: клиент %d только что ушел\n"

Memory or fd leaks are forbidden                                                    -

To help you, you will find the file main.c with the beginning of a server and       -
maybe some useful functions. (Beware this file use forbidden functions or write
things that must not be there in your final program)
// В помощь вам вы найдете файл main.c с началом сервера и, возможно, некоторыми
// полезными функциями. (Остерегайтесь, что этот файл использует запрещенные
// функции или записывает вещи, которых не должно быть в вашей окончательной
// программе)

Warning our tester is expecting that you send the messages as fast as you can.      -
Don't do un-necessary buffer.
// Предупреждение: наш тестер ожидает, что вы будете отправлять сообщения как можно
быстрее. Не делайте ненужный буфер.

Evaluation can be a bit longer than usual...
// Оценка может быть немного дольше, чем обычно...

Hint: you can use nc to test your program
// Подсказка: вы можете использовать nc для тестирования вашей программы
Hint: you should use nc to test your program
// Подсказка: вы должны использовать nc для тестирования вашей программы
Hint: To test you can use fcntl(fd, F_SETFL, O_NONBLOCK) but use select and NEVER
check EAGAIN (man 2 send)
// Подсказка: для проверки вы можете использовать fcntl(fd, F_SETFL, O_NONBLOCK),
// но использовать select и НИКОГДА не проверять EAGAIN (man 2 send)

Имя назначения : mini_serv
Ожидаемые файлы : mini_serv.c
Разрешенные функции : write, close, select, socket, accept, listen, send, recv, bind, strstr, malloc, realloc, free, calloc, bzero, atoi, sprintf, strlen, exit, strcpy, strcat, memset
--------------------------------------------------------------------------------

Напишите программу, которая будет прослушивать подключение клиента к определенному порту на 127.0.0.1 и позволит клиентам разговаривать друг с другом

Эта программа будет принимать в качестве первого аргумента порт для привязки
Если аргумент не задан, он должен написать в stderr "Wrong number of arguments", за которым следует a \n и выйти со статусом 1
Если системный вызов возвращает ошибку до того, как программа начнет принимать соединение, она должна написать в stderr "Fatal error", а затем a \n и выйти со статусом 1
Если вы не можете выделить память, он должен написать в stderr "Fatal error", а затем a \n и выйти со статусом 1

Ваша программа должна быть неблокирующей, но клиент может быть ленивым, и если он не читает ваше сообщение, вы не должны отключать его...

Ваша программа не должна содержать #define preproc
Ваша программа должна слушать только 127.0.0.1
Fd, который вы получите, уже будет настроен на блокировку 'recv' или 'send', если select не был вызван до их вызова, но в противном случае не будет заблокирован.

Когда клиент подключается к серверу:
- клиенту будет выдано удостоверение личности. первый клиент получит идентификатор 0, а каждый новый клиент получит последний идентификатор клиента + 1
- %d будет заменено на это число
- всем клиентам, которые были подключены к серверу, отправляется сообщение: "server: client %d just arrived\n"

клиенты должны иметь возможность отправлять сообщения в вашу программу.
- сообщение будет состоять только из печатаемых символов, проверять его не нужно
- одно сообщение может содержать несколько \n
- когда сервер получает сообщение, он должен повторно отправить его всем другим клиентам с "client %d:" перед каждой строкой!

Когда клиент отключается от сервера:
- всем клиентам, которые были подключены к серверу, отправляется сообщение: "server: client %d just left\n"

Утечки памяти или fd запрещены

Чтобы помочь вам, вы найдете файл main.c с началом работы сервера и, возможно, некоторые полезные функции. (Остерегайтесь, чтобы этот файл использовал запрещенные функции или писал вещи, которых не должно быть в вашей окончательной программе)

Предупреждение наш тестер ожидает, что вы будете отправлять сообщения так быстро, как только сможете. Не делайте ненужного буфера.

Оценка может быть немного дольше, чем обычно...

Подсказка: вы можете использовать nc для тестирования вашей программы
Подсказка: вы должны использовать nc для тестирования вашей программы
Подсказка: Для тестирования вы можете использовать fcntl(fd, F_SETFL, O_NONBLOCK), но используйте select и НИКОГДА НЕ проверяйте EAGAIN (man 2 send)