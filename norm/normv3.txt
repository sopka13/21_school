The Norm
Version 3

Summary:  This document describes the applicable standard (Norm) at 42.
A programming standard defines a set of rules to follow when writing code. The
Norm applies to all C projects with in the Inner Circle by default, and to any
project where it’s specified.
// Резюме: Этот документ описывает применимый стандарт (Норма) в 42.
// Стандарт программирования определяет набор правил, которым необходимо следовать
// при написании кода. Норма по умолчанию применяется ко всем проектам C внутри
// Внутреннего круга и ко всем проектам, в которых она указана. 

Contents
IForeword																			2
IIThe Norm																			3
II.1	Denomination  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 	3
II.2	Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .	4
II.3	Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 	6
II.4	Typedef, struct, enum and union . . . . . . . . . . . . . . . . . . . . .	7
II.5	Headers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .	8
II.6	Macros and Pre-processors  . . . . . . . . . . . . . . . . . . . . . . . 	9
II.7	Forbidden stuff!  . . . . . . . . . . . . . . . . . . . . . . . . . . . .	10
II.8	Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 	11
II.9	Files  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .	12
II.10	Makefile  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 	13
II.11	Why ?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .	14
// СОДЕРЖАНИЕ
// IПредисловие
// 1	Обозначение
// 2	Форматирование
// 3	Функции
// 4	Typedef, struct, enum and union
// 5	Headers
// 6	Makros and preprocessor
// 7	Запрещенные вещи!
// 8	Comments
// 9	Files
// 10	Makefiles
// 11	Зачем ?

Chapter I
Foreword
The Norm is in python and open source.
Its repository is available at https://github.com/42School/norminette.
Pull requests, suggestions and issues are welcome!
// Норма написана на Python и с открытым исходным кодом.
// Его репозиторий доступен по адресу https://github.com/42School/norminette.
// Запросы на вытягивание, предложения и вопросы приветствуются! 

Chapter II
The Norm
II.1  Denomination
•	A structure’s name must start by s_.
•	A typedef’s name must start by t_.
•	A union’s name must start by u_.
•	An enum’s name must start by e_.
•	A global’s name must start by g_.
•	Variables and functions names can only contain lowercases, digits and ’_’ (UnixCase).
•	Files and directories names can only contain lowercases, digits and ’_’ (Unix Case).
•	Characters that aren’t part of the standard ASCII table are forbidden.
•	Variables, functions, and any other identifier must use snake case. No capital
	letters,and each word separated by an underscore.
•	All identifiers (functions, macros, types, variables, etc.) must be in English.
•	Objects (variables, functions, macros, types, files or directories) must have the most
	explicit or most mnemonic names as possible.
•	Using global variables that are not marked const and static is forbidden and is
	considered a norm error, unless the project explicitly allows them.
•	The file must compile. A file that doesn’t compile isn’t expected to pass the Norm.

II.2  Formatting
•	You must indent your code with 4-space tabulations. This is not the same as 4average spaces,
	we’re talking about real tabulations here.
•	Each function must be maximum 25 lines, not counting the function’s own curlybrackets.
•	Each line must be at most 80 columns wide, comments included.
	Warning: atabulation doesn’t count as a column, but as the number of spaces it represents.
•	Each function must be separated by a newline. Any comment or preprocessorinstruction can
	be right above the function.  The newline is after the previousfunction.
•	One instruction per line.
•	An empty line must be empty: no spaces or tabulations.
•	A line can never end with spaces or tabulations.
•	You can never have two consecutive spaces.
	// У вас никогда не может быть двух подряд идущих пробелов 
•	You need to start a new line after each curly bracket or end of control structure.
•	Unless it’s the end of a line, each comma or semi-colon must be followed by a space.
	// Если это не конец строки, после каждой запятой или точки с запятой должен стоять пробел.
•	Each operator or operand must be separated by one - and only one - space.
•	Each C keyword must be followed by a space, except for keywords for types
	(suchas int, char, float, etc.), as well as sizeof.
	// Каждое ключевое слово C должно сопровождаться пробелом, за исключением ключевых слов для
	// типов (таких как int, char, float и т. Д.), А также sizeof.
•	Each variable declaration must be indented on the same column for its scope.
	// Каждое объявление переменной должно иметь отступ в том же столбце, что и его область видимости. 
•	The asterisks that go with pointers must be stuck to variable names.
	// Звездочки, которые идут с указателями, должны быть прикреплены к именам переменных. 
•	One single variable declaration per line.
•	Declaration and an initialisation cannot be on the same line, except for globalvariables
	(when allowed), static variables, and constants.
	// Объявление и инициализация не могут находиться в одной строке, за исключением глобальных
	// переменных (если это разрешено), статических переменных и констант. 
•	Declarations must be at the beginning of a function.
	// Объявления должны быть в начале функции. 
•	In a function, you must place an empty line between variable declarations and the remaining
	of the function. No other empty lines are allowed in a function.
•	Multiple assignments are strictly forbidden.
•	You may add a new line after an instruction or control structure, but you’ll have to add an
	indentation with brackets or assignment operator. Operators must be at the beginning of a line.
	// Вы можете добавить новую строку после инструкции или структуры управления, но вам нужно будет добавить
	// отступ в квадратных скобках или оператор присваивания. Операторы должны быть в начале строки. 
•	Control structures (if, while..) must have braces, unless they contain a single
	lineor a single condition.
	// Управляющие структуры (if, while ..) должны иметь фигурные скобки, если они не содержат одну строку или одно условие.

General example:

int				g_global;
typedef struct	s_struct
{
	char	*my_string;
	int		i;
}				t_struct;
struct			s_other_struct;

int		main(void)
{
	int		i;
	char	c;
	return	(i);
}

II.3  Functions
•	A function can take 4 named parameters maximum.
•	A function that doesn’t take arguments must be explicitly prototyped with the word "void" as the argument.
	// Функция, которая не принимает аргументы, должна быть явным образом прототипирована со словом void в качестве аргумента. 
•	Parameters in functions’ prototypes must be named.
	// Параметры в прототипах функций должны быть названы. 
•	Each function must be separated from the next by an empty line.
•	You can’t declare more than 5 variables per function.
	// Вы не можете объявить более 5 переменных для одной функции. 
•	Return of a function has to be between parenthesis.
	// Возврат функции должен быть заключен в круглые скобки.
•	Each function must have a single tabulation between its return type and its name.
	// Каждая функция должна иметь один таб между ее типом возвращаемого значения и ее именем. 

II.4  Typedef, struct, enum and union
•	Add a tabulation when declaring a struct, enum or union.
•	When declaring a variable of type struct, enum or union, add a single space in thetype.
	// При объявлении переменной типа struct, enum или union добавьте один пробел в тип. 
•	When declaring a struct, union or enum with a typedef, all indentation rules apply.
	You must align the typedef’s name with the struct/union/enum’s name.
	// Вы должны выровнять имя typedef с именем struct / union / enum. 
•	You must indent all structures’ names on the same column for their scope.
	// Вы должны сделать отступ для имен всех структур в одном столбце для их области видимости. 
•	You cannot declare a structure in a .c file.

II.5  Headers
•	The things allowed in header files are: header inclusions (system or not), declara-tions, defines,
	prototypes and macros.
•	All includes must be at the beginning of the file.
•	You cannot include a C file.
	// Все включения должны быть в начале файла. 
•	Header files must be protected from double inclusions. If the file is ft_foo.h, its by stander macro
	is FT_FOO_H.
•	Unused header inclusions (.h) are forbidden.
•	All header inclusions must be justified in a .c file as well as in a .h file.
	// Все включения заголовков должны быть выровнены как в файле .c, так и в файле .h. 

II.6  Macros and Pre-processors
•	Preprocessor constants (or #define) you create must be used only for literal and constant values.
	// Константы препроцессора (или #define), которые вы создаете, должны использоваться только для буквальных и постоянных значений. 
•	All #define created to by pass the norm and/or obfuscate code are forbidden. This
	part must be checked by a human.
	// Все #define, созданные для обхода нормального и / или запутанного кода, запрещены. Эта часть должна быть проверена человеком. 
•	You can use macros available in standard libraries, only if those ones are allowed
	in the scope of the given project.
	// Вы можете использовать макросы, доступные в стандартных библиотеках, только если они разрешены в рамках данного проекта. 
•	Multiline macros are forbidden.
•	Macro names must be all uppercase.
•	You must indent characters following #if, #ifdef or #ifndef.
	// Вы должны делать отступ для символов после #if, #ifdef или #ifndef. 

II.7  Forbidden stuff!
•	You’re not allowed to use:
	◦for
	◦do...while
	◦switch
	◦case
	◦goto
•	Ternary operators such as ‘?’.
•	VLAs - Variable Length Arrays.
	// VLA - массивы переменной длины. 
•	Implicit type in variable declarations

II.8  Comments
•	Comments cannot be inside functions’ bodies. Comments must be at the end of aline, or on their own line
•	Your comments must be in English. And they must be useful.
•	A comment cannot justify a "bastard" function.

II.9  Files
•	You cannot include a .c file.
•	You cannot have more than 5 function-definitions in a .c file.
	// В файле .c не может быть более 5 определений функций.

II.10  Makefile
Makefiles aren’t checked by the Norm, and must be checked during evaluation by thestudent.
// Make-файлы не проверяются Нормой и должны проверяться во время оценки студентом.
•	The $(NAME), clean, fclean, re and all rules are mandatory.
•	If the makefile relinks, the project will be considered non-functional.
	// Если make-файл будет повторно связан, проект будет считаться нефункциональным.
•	In the case of a multibinary project, in addition to the above rules, you must have arule that compiles
	both binaries as well as a specific rule for each binary compiled.
	// В случае многобинарного проекта, помимо приведенных выше правил, у вас должно быть правило,
	// которое компилирует оба двоичных файла, а также конкретное правило для каждого скомпилированного двоичного файла.
•	In the case of a project that calls a function from a non-system library (e.g.:libft),your makefile must
	compile this library automatically.
	// В случае проекта, который вызывает функцию из несистемной библиотеки (например: libft),
	// ваш make-файл должен автоматически компилировать эту библиотеку.
•	All source files you need to compile your project must be explicitly named in your Makefile.
	// Все исходные файлы, необходимые для компиляции вашего проекта, должны быть явно названы в yourMakefile. 

II.11  Why ?
The Norm has been carefully crafted to fulfill many pedagogical needs. Here are the most
important reasons for all the choices above:
// Норма была тщательно разработана для удовлетворения многих педагогических потребностей.
// Вот наиболее важные причины для всех вышеперечисленных вариантов:
•	Sequencing: coding implies splitting a big and complex task in a long series of
	elementary instructions. All these instructions will be executed in sequence: one
	after another. A beginner that starts creating software needs a simple and clear
	architecture for their project, with a full understanding of all individual instruction
	sand the precise order of execution. Cryptic language syntaxes that do multiple
	instructions apparently at the same time are confusing, functions that try to address
	multiple tasks mixed in the same portion of code are source of errors. The Norm asks
	you to create simple pieces of code, where the unique task of each
	piece can be clearly understood and verified, and where the sequence of all the
	executed instructions leaves no doubt. That’s why we ask for 25 lines maximum infunctions,
	also why for,do ..  while, or ternaries are forbidden.
	// Последовательность: кодирование подразумевает разделение большой и сложной задачи на
	// длинную серию элементарных инструкций. Все эти инструкции будут выполняться последовательно:
	// одна за другой. Новичку, который начинает создавать программное обеспечение, нужна простая
	// и понятная архитектура для своего проекта, с полным пониманием всех индивидуальных инструкций
	// и точного порядка выполнения. Синтаксис зашифрованного языка, который, по-видимому, выполняет
	// несколько инструкций одновременно, сбивает с толку, функции, которые пытаются решить несколько
	// задач, смешанных в одной и той же части кода, являются источником ошибок. Норма просит вас
	// создавать простые фрагменты кода, в которых уникальная задача каждого фрагмента может быть
	// четко понята и проверена, и где последовательность всех выполняемых инструкций не оставляет
	// сомнений. Вот почему мы просим использовать не более 25 строк, а также почему for,
	// do ... while или ternaries запрещены. 
•	Look and Feel: while exchanging with your friends and workmates during the nor-mal
	peer-learning process, and also during the peer-evaluations, you do not want
	to spend time to decrypt their code, but directly talk about the logic of the piece
	of code. The Norm asks you to use a specific look and feel, providing instructions for the
	naming of the functions and variables, indentation, brace rules, tab and spaces at
	many places... . This will allow you to smoothly have a look at other’s codes that
	will look familiar, and get directly to the point instead of spending time to read the
	code before understanding it. The Norm also comes as a trademark. As part of the 42
	community, you will be able to recognize code written by another 42 student or
	alumni when you’ll be in the labor market.
	// Смотри и чувствуй: обмениваясь с друзьями и коллегами во время обычного процесса
	// взаимного обучения, а также во время взаимных оценок, вы не хотите тратить время
	// на расшифровку их кода, а напрямую говорите о логике работы. кода. Норма просит
	// вас использовать определенный внешний вид, предоставляя инструкции для именования
	// функций и переменных, отступов, правил скобок, табуляции и пробелов во многих
	// местах ... Это позволит вам беспрепятственно взглянуть на чужие коды, которые
	// покажутся вам знакомыми, и сразу перейти к сути, вместо того, чтобы тратить время
	// на чтение кода, прежде чем понимать его. Norm также является товарным знаком.
	// Будучи частью сообщества 42, вы сможете узнавать код, написанный другим 42 студентом
	// или выпускником, когда попадете на рынок труда. 
•	Long-term vision: making the effort to write understandable code is the best way
	to maintain it. Each time that someone else, including you, has to fix a bug or
	add a new feature they won’t have to lose their precious time trying to figure out
	what it does if previously you did things in the right way. This will avoid situations
	where pieces of code stop being maintained just because it is time-consuming, and
	that can make the difference when we talk about having a successful product in the
	market. The sooner you learn to do so, the better.
	// Долгосрочное видение: усилия по написанию понятного кода - лучший способ его
	// поддерживать. Каждый раз, когда кто-то другой, в том числе и вы, должен исправить
	// ошибку или добавить новую функцию, ему не придется терять драгоценное время, пытаясь
	// выяснить, что он делает, если раньше вы все делали правильно. Это позволит избежать
	// ситуаций, когда части кода перестают поддерживаться только потому, что это отнимает
	// много времени, и это может иметь значение, когда мы говорим об успешном продукте на
	// рынке. Чем раньше вы научитесь это делать, тем лучше.
•	References: you may think that some, or all, the rules included on the Norm are
	arbitrary, but we actually thought and read about what to do and how to do it. We highly
	encourage you to Google why the functions should be short and just do one thing,
	why the name of the variables should make sense, why lines shouldn’t
	be longer than 80 columns wide, why a function should not take many parameters,
	why comments should be useful, etc, etc, etc...
	// Ссылки: вы можете подумать, что некоторые или все правила, включенные в Норму,
	// произвольны, но на самом деле мы думали и читали о том, что делать и как это делать.
	// Мы настоятельно рекомендуем вам узнать в Google, почему функции должны быть короткими
	// и делать только одно, почему имена переменных должны иметь смысл, почему строки не
	// должны быть длиннее 80 столбцов в ширину, почему функция не должна принимать много
	// параметров, почему комментарии должны быть полезными и т. д., т. д. и т. д. 