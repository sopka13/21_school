#include "../includes/kernel_header.h"

//t_gdt_entry			*gdt;
//t_gdt_ptr			gdtr;
t_gdt_entry			gdt[GDT_SIZE];
t_gdt_ptr			*gdtr = (t_gdt_ptr *)GDT_ADDR;
t_idt_entry_struct	idt_entries[256];
t_idt_ptr_struct	idtr;

/* Setup a descriptor in the Global Descriptor Table */
void	gdt_set_gate(t_gdt_entry *desc,
					uint32_t base,
					uint32_t limit,
					uint8_t access,	// Byte of access
					uint8_t other)	// Flags
{
	desc->limit_low		= (limit & 0xffff);
	desc->base_low		= (base & 0xffff);
	desc->base_middle	= (base & 0xff0000) >> 16;
	desc->access		= access;
	desc->limit			= (limit & 0xf0000) >> 16;
	desc->other			= (other & 0xf);
	desc->base_high		= (base & 0xff000000) >> 24;
}

void	gdt_install(void) {
	gdtr->limit = (sizeof(struct gdt_entry) * GDT_SIZE) - 1;
	gdtr->base = ((uint32_t)(&gdt));

	gdt_set_gate(&gdt[0], 0, 0, 0, 0);
	gdt_set_gate(&gdt[1], 0, 0xFFFFFFFF, 0x9A, 0xC);		// Code segment
	gdt_set_gate(&gdt[2], 0, 0xFFFFFFFF, 0x92, 0xC);		// Data segment
	gdt_set_gate(&gdt[3], 0, 0xFFFFFFFF, 0x96, 0xC);		// Stack segment

	gdt_set_gate(&gdt[4], 0, 0xFFFFFFFF, 0xFA, 0xC);		// User space code segment
	gdt_set_gate(&gdt[5], 0, 0xFFFFFFFF, 0xF2, 0xC);		// User space data segment
	gdt_set_gate(&gdt[6], 0, 0xFFFFFFFF, 0xF6, 0xC);		// User space stack segment

	/* TSS */
	// gdt_set_gate(5, &TSS, sizeof(TSS), 0x89, 0x0);		// TSS segment

	//set_gdt();
	//reload_segments();
	load_gdt(((uint32_t)&gdtr));
	//return ;
}
/*
void	idt_set_gate(uint8_t num, uint32_t base, uint16_t sel, uint8_t flags) {
   idt_entries[num].base_lo = base & 0xFFFF;
   idt_entries[num].base_hi = (base >> 16) & 0xFFFF;

   idt_entries[num].sel     = sel;
   idt_entries[num].always0 = 0;
   // Мы должны раскомментировать приведенную ниже операцию OR в случае, если нужен пользовательский режим.
   // Эта операция устанавливает уровень привилегий, используемый шлюзом прерываний, равным 3.
   idt_entries[num].flags   = flags | 0x60;
}

void	init_idt() {
	idtr.limit = sizeof(t_idt_entry_struct) * 256 -1;
	idtr.base  = (uint32_t)&idt_entries;

	memset(&idt_entries, 0, sizeof(t_idt_entry_struct)*256);

	idt_set_gate(0, (uint32_t)isr0, 0x08, 0x8E);
	idt_set_gate(1, (uint32_t)isr1, 0x08, 0x8E);
	idt_set_gate(2, (uint32_t)isr2, 0x08, 0x8E);
	idt_set_gate(3, (uint32_t)isr3, 0x08, 0x8E);
	idt_set_gate(4, (uint32_t)isr4, 0x08, 0x8E);
	idt_set_gate(5, (uint32_t)isr5, 0x08, 0x8E);
	idt_set_gate(6, (uint32_t)isr6, 0x08, 0x8E);
	idt_set_gate(7, (uint32_t)isr7, 0x08, 0x8E);
	idt_set_gate(8, (uint32_t)isr8, 0x08, 0x8E);
	idt_set_gate(9, (uint32_t)isr9, 0x08, 0x8E);
	idt_set_gate(10, (uint32_t)isr10, 0x08, 0x8E);
	idt_set_gate(11, (uint32_t)isr11, 0x08, 0x8E);
	idt_set_gate(12, (uint32_t)isr12, 0x08, 0x8E);
	idt_set_gate(13, (uint32_t)isr13, 0x08, 0x8E);
	idt_set_gate(14, (uint32_t)isr14, 0x08, 0x8E);
	idt_set_gate(15, (uint32_t)isr15, 0x08, 0x8E);
	idt_set_gate(16, (uint32_t)isr16, 0x08, 0x8E);
	idt_set_gate(17, (uint32_t)isr17, 0x08, 0x8E);
	idt_set_gate(18, (uint32_t)isr18, 0x08, 0x8E);
	idt_set_gate(19, (uint32_t)isr19, 0x08, 0x8E);
	idt_set_gate(20, (uint32_t)isr20, 0x08, 0x8E);
	idt_set_gate(21, (uint32_t)isr21, 0x08, 0x8E);
	idt_set_gate(22, (uint32_t)isr22, 0x08, 0x8E);
	idt_set_gate(23, (uint32_t)isr23, 0x08, 0x8E);
	idt_set_gate(24, (uint32_t)isr24, 0x08, 0x8E);
	idt_set_gate(25, (uint32_t)isr25, 0x08, 0x8E);
	idt_set_gate(26, (uint32_t)isr26, 0x08, 0x8E);
	idt_set_gate(27, (uint32_t)isr27, 0x08, 0x8E);
	idt_set_gate(28, (uint32_t)isr28, 0x08, 0x8E);
	idt_set_gate(29, (uint32_t)isr29, 0x08, 0x8E);
	idt_set_gate(30, (uint32_t)isr30, 0x08, 0x8E);
	idt_set_gate(31, (uint32_t)isr31, 0x08, 0x8E);

	set_idt();
}*/
