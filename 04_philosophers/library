void		*memset( void *dest, int c, size_t count )					Заполняет указанный размер в count в массиве dest символом "с";
int			usleep (useconds_t usec); 									Приостанавливает работу потока, в котором она была вызвана, на указанное в аргументе время в микросекундах или до поступления сигнала по которому вызывается функция обработки сигналов или программа завершает свою работу. 
int			gettimeofday( struct timeval *, struct tzp *)				Возвращает время в секундах и микросекундах в структуре timeval
int			pthread_create(pthread_t *restrict thread,					Запускает новую нить
							const pthread_attr_t *restrict attr,
							void *(*start_routine)(void *),
							void *restrict arg);
int			pthread_detach(pthread_t tid)								Изменяет состояние потока, превращая его из присоединяемого в отсоединенный
int			pthread_join(pthread_t tid, void **status)					Приостанавливает выполнение вызвавшего ее потока до тех пор, пока поток, чей идентификатор передан функции в качестве аргумента, не завершит свою работу.
int			pthread_mutex_init(pthread_mutex_t *mp,						Предназначена для инициализации мьютекса
							const pthread_mutexattr_t *mattr)
int			pthread_mutex_destroy (mutex)								Эта функция освобождает все области памяти, выделенные функцией pthread_mutex_init
int			pthread_mutex_lock(pthread_mutex_t *mutex)					Захват мьютекса
int			pthread_mutex_unlock(pthread_mutex_t *mutex)				Освобождение мьютекса
sem_t		*sem_open(const char *name, int oflag);						Создаёт новый семафор POSIX или открывает существующий семафор. Семафору присваивается имя name
sem_t		*sem_open(const char *name, int oflag,
						 mode_t mode, unsigned int value)
int			sem_close(sem_t *sem);										Закрывает именованый семафор
int			sem_post(sem_t *sem)										Увеличивает (разблокирует) семафор, на который указывает sem. Если значение семафора после этого становится больше нуля, то другой процесс или нить заблокированная в вызове sem_wait(3), проснётся и заблокирует семафор. 
int			sem_wait(sem_t *sem);										Уменьшает (блокирует) семафор, на который указывает sem. Если значение семафор больше нуля, то выполняется уменьшение и функция сразу завершается. Если значение семафора равно нулю, то вызов блокируется до тех пор, пока не станет возможным выполнить уменьшение (т. е., значение семафора не станет больше нуля), или пока не вызовется обработчик сигнала. 
int			sem_unlink(const char *name)								Удаляет семафор из системы
